import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { UserCreateDto } from './dto/user-create.dto';
import { UserNotFoundException } from './exception/user-not-found.filter';
import { User } from './user.entity';

@Injectable()
export class UserService {
  constructor(
    @InjectRepository(User) private readonly userRepository: Repository<User>,
  ) {}

  /**
   * this method searches for a user by email
   * @param email email of the user to be found
   * @returns return the found user
   */
  public async getByEmail(email: string): Promise<User> {
    const user = await this.userRepository.findOne({ where: { email } });
    if (user) return user;
    throw new UserNotFoundException('email');
  }

  /**
   * this method searches for a user by id
   * @param id id of the user to be found
   * @returns return the found user
   */
  public async getById(id: number): Promise<User> {
    const user = await this.userRepository.findOne({ where: { id } });
    if (user) return user;
    throw new UserNotFoundException('id');
  }

  /**
   * this method crestes a new user
   * @param user generated by the user
   * @returns return the created user
   */
  public async create(user: UserCreateDto): Promise<User> {
    return await this.userRepository.save(user);
  }
}
